package app.estat.mob.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import app.estat.mob.db.converter.ActivityConverter;
import app.estat.mob.db.type.Activity;

import app.estat.mob.db.entity.Module;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MODULE".
*/
public class ModuleDao extends AbstractDao<Module, Long> {

    public static final String TABLENAME = "MODULE";

    /**
     * Properties of entity Module.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "ID");
        public final static Property NameRes = new Property(1, String.class, "nameRes", false, "NAME");
        public final static Property IconRes = new Property(2, String.class, "iconRes", false, "ICON");
        public final static Property DescriptionRes = new Property(3, String.class, "descriptionRes", false, "DESCRIPTION");
        public final static Property Activity = new Property(4, String.class, "activity", false, "ACTIVITY");
    }

    private final ActivityConverter activityConverter = new ActivityConverter();

    public ModuleDao(DaoConfig config) {
        super(config);
    }
    
    public ModuleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MODULE\" (" + //
                "\"ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: nameRes
                "\"ICON\" TEXT," + // 2: iconRes
                "\"DESCRIPTION\" TEXT," + // 3: descriptionRes
                "\"ACTIVITY\" TEXT);"); // 4: activity
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MODULE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Module entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String nameRes = entity.getNameRes();
        if (nameRes != null) {
            stmt.bindString(2, nameRes);
        }
 
        String iconRes = entity.getIconRes();
        if (iconRes != null) {
            stmt.bindString(3, iconRes);
        }
 
        String descriptionRes = entity.getDescriptionRes();
        if (descriptionRes != null) {
            stmt.bindString(4, descriptionRes);
        }
 
        Activity activity = entity.getActivity();
        if (activity != null) {
            stmt.bindString(5, activityConverter.convertToDatabaseValue(activity));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Module entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String nameRes = entity.getNameRes();
        if (nameRes != null) {
            stmt.bindString(2, nameRes);
        }
 
        String iconRes = entity.getIconRes();
        if (iconRes != null) {
            stmt.bindString(3, iconRes);
        }
 
        String descriptionRes = entity.getDescriptionRes();
        if (descriptionRes != null) {
            stmt.bindString(4, descriptionRes);
        }
 
        Activity activity = entity.getActivity();
        if (activity != null) {
            stmt.bindString(5, activityConverter.convertToDatabaseValue(activity));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Module readEntity(Cursor cursor, int offset) {
        Module entity = new Module( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nameRes
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // iconRes
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // descriptionRes
            cursor.isNull(offset + 4) ? null : activityConverter.convertToEntityProperty(cursor.getString(offset + 4)) // activity
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Module entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setNameRes(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIconRes(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescriptionRes(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setActivity(cursor.isNull(offset + 4) ? null : activityConverter.convertToEntityProperty(cursor.getString(offset + 4)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Module entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Module entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Module entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
