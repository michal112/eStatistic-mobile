package app.estat.mob.db.entity;

import app.estat.mob.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import app.estat.mob.db.dao.CowDao;
import app.estat.mob.db.dao.CowParentDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "COW".
 */
public class Cow {

    private Long id;
    private String name;
    private String number;
    private Integer book;
    private String birth;
    private Long cowParentId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CowDao myDao;

    private CowParent cowParent;
    private Long cowParent__resolvedKey;


    public Cow() {
    }

    public Cow(Long id) {
        this.id = id;
    }

    public Cow(Long id, String name, String number, Integer book, String birth, Long cowParentId) {
        this.id = id;
        this.name = name;
        this.number = number;
        this.book = book;
        this.birth = birth;
        this.cowParentId = cowParentId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCowDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getNumber() {
        return number;
    }

    public void setNumber(String number) {
        this.number = number;
    }

    public Integer getBook() {
        return book;
    }

    public void setBook(Integer book) {
        this.book = book;
    }

    public String getBirth() {
        return birth;
    }

    public void setBirth(String birth) {
        this.birth = birth;
    }

    public Long getCowParentId() {
        return cowParentId;
    }

    public void setCowParentId(Long cowParentId) {
        this.cowParentId = cowParentId;
    }

    /** To-one relationship, resolved on first access. */
    public CowParent getCowParent() {
        Long __key = this.cowParentId;
        if (cowParent__resolvedKey == null || !cowParent__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CowParentDao targetDao = daoSession.getCowParentDao();
            CowParent cowParentNew = targetDao.load(__key);
            synchronized (this) {
                cowParent = cowParentNew;
            	cowParent__resolvedKey = __key;
            }
        }
        return cowParent;
    }

    public void setCowParent(CowParent cowParent) {
        synchronized (this) {
            this.cowParent = cowParent;
            cowParentId = cowParent == null ? null : cowParent.getId();
            cowParent__resolvedKey = cowParentId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
