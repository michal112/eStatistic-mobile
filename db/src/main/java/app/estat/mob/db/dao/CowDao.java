package app.estat.mob.db.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import app.estat.mob.db.converter.BookConverter;
import app.estat.mob.db.entity.Bull;
import app.estat.mob.db.type.Book;

import app.estat.mob.db.entity.Cow;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COW".
*/
public class CowDao extends AbstractDao<Cow, Long> {

    public static final String TABLENAME = "COW";

    /**
     * Properties of entity Cow.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property PublicId = new Property(1, String.class, "publicId", false, "PUBLIC_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Number = new Property(3, String.class, "number", false, "NUMBER");
        public final static Property Book = new Property(4, String.class, "book", false, "BOOK");
        public final static Property BullId = new Property(5, Long.class, "bullId", false, "BULL_ID");
        public final static Property Birthday = new Property(6, java.util.Date.class, "birthday", false, "BIRTHDAY");
    }

    private DaoSession daoSession;

    private final BookConverter bookConverter = new BookConverter();
    private Query<Cow> bull_ChildrenQuery;

    public CowDao(DaoConfig config) {
        super(config);
    }
    
    public CowDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COW\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PUBLIC_ID\" TEXT," + // 1: publicId
                "\"NAME\" TEXT," + // 2: name
                "\"NUMBER\" TEXT," + // 3: number
                "\"BOOK\" TEXT," + // 4: book
                "\"BULL_ID\" INTEGER," + // 5: bullId
                "\"BIRTHDAY\" INTEGER);"); // 6: birthday
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COW\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Cow entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String publicId = entity.getPublicId();
        if (publicId != null) {
            stmt.bindString(2, publicId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(4, number);
        }
 
        Book book = entity.getBook();
        if (book != null) {
            stmt.bindString(5, bookConverter.convertToDatabaseValue(book));
        }
 
        Long bullId = entity.getBullId();
        if (bullId != null) {
            stmt.bindLong(6, bullId);
        }
 
        java.util.Date birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(7, birthday.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Cow entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String publicId = entity.getPublicId();
        if (publicId != null) {
            stmt.bindString(2, publicId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(4, number);
        }
 
        Book book = entity.getBook();
        if (book != null) {
            stmt.bindString(5, bookConverter.convertToDatabaseValue(book));
        }
 
        Long bullId = entity.getBullId();
        if (bullId != null) {
            stmt.bindLong(6, bullId);
        }
 
        java.util.Date birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(7, birthday.getTime());
        }
    }

    @Override
    protected final void attachEntity(Cow entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Cow readEntity(Cursor cursor, int offset) {
        Cow entity = new Cow( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // publicId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // number
            cursor.isNull(offset + 4) ? null : bookConverter.convertToEntityProperty(cursor.getString(offset + 4)), // book
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // bullId
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)) // birthday
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Cow entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPublicId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBook(cursor.isNull(offset + 4) ? null : bookConverter.convertToEntityProperty(cursor.getString(offset + 4)));
        entity.setBullId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setBirthday(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Cow entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Cow entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Cow entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "children" to-many relationship of Bull. */
    public List<Cow> _queryBull_Children(Long bullId) {
        synchronized (this) {
            if (bull_ChildrenQuery == null) {
                QueryBuilder<Cow> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.BullId.eq(null));
                bull_ChildrenQuery = queryBuilder.build();
            }
        }
        Query<Cow> query = bull_ChildrenQuery.forCurrentThread();
        query.setParameter(0, bullId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getBullDao().getAllColumns());
            builder.append(" FROM COW T");
            builder.append(" LEFT JOIN BULL T0 ON T.\"BULL_ID\"=T0.\"ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Cow loadCurrentDeep(Cursor cursor, boolean lock) {
        Cow entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Bull father = loadCurrentOther(daoSession.getBullDao(), cursor, offset);
        entity.setFather(father);

        return entity;    
    }

    public Cow loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Cow> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Cow> list = new ArrayList<Cow>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Cow> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Cow> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
